<?xml version="1.0" ?>
<%
  # Based on Gazebo example

  # Vehicle with rigid suspension and front steering
  # Consists of box chassis with 4 non-steerable wheels
  # SI units (length in meters)

  # Geometry
  chassis_dx   = 0.316
  chassis_dy   = 0.316
  chassis_dz   = 0.170
  wheel_radius = 0.050
  wheel_width  = 0.040
  chassis_z0   = wheel_radius + chassis_dz / 2.0
  wheel_x0     = chassis_dx*0.3
  wheel_y0     = chassis_dy*0.5 + wheel_width*0.6 + 0.010
  steer_limit  = 75 * Math::PI / 180.0
  caster_angle =  5 * Math::PI / 180.0




  blocker_offset = 0.05
  blocker_angle  = 55
  blocker_len    = 0.7
  blocker_edge   = 0.05

  shoulder_radius = 0.03
  shoulder_height = 0.18

  kicker_len    = 0.25
  kicker_radius = 0.03
  kicker_offset = 0.01

  blocker_rad = blocker_angle * Math::PI / 180.0
  blocker_x   = blocker_len * Math::sin(blocker_rad) * 0.5
  blocker_y   = blocker_len * Math::cos(blocker_rad) * 0.5


  arm_scales = {
    "right" => {:y_scale => -1},
    "left" => {:y_scale => 1},
  }

  front_wheel_locations = {
    "fl" => {:x0 => wheel_x0, :y0 => wheel_y0 },
    "fr" => {:x0 => wheel_x0, :y0 => -wheel_y0 },
  }
  rear_wheel_locations = {
    "rl" => {:x0 => -wheel_x0, :y0 => wheel_y0 },
    "rr" => {:x0 => -wheel_x0, :y0 => -wheel_y0 },
  }

  # inertia
  chassis_mass = 2.0
  chassis_ixx  = chassis_mass/12.0 * (chassis_dy**2 + chassis_dz**2)
  chassis_iyy  = chassis_mass/12.0 * (chassis_dz**2 + chassis_dx**2)
  chassis_izz  = chassis_mass/12.0 * (chassis_dx**2 + chassis_dy**2)

  kicker_mass = 0.5
  kicker_ixx  = kicker_mass/12.0 * (3 * kicker_radius**2 + kicker_len**2)
  kicker_iyy  = kicker_mass/12.0 * (3 * kicker_radius**2 + kicker_len**2)
  kicker_izz  = kicker_mass/2.0 * kicker_radius**2

  shoulder_mass = 0.1
  shoulder_ixx  = shoulder_mass/12.0 * (3 * shoulder_radius**2 + shoulder_height**2)
  shoulder_iyy  = shoulder_mass/12.0 * (3 * shoulder_radius**2 + shoulder_height**2)
  shoulder_izz  = shoulder_mass/2.0 * shoulder_radius**2

  blocker_mass = 0.1
  blocker_ixx  = blocker_mass/12.0 * (blocker_edge**2 + blocker_edge**2)
  blocker_iyy  = blocker_mass/12.0 * (blocker_edge**2 + blocker_len**2)
  blocker_izz  = blocker_mass/12.0 * (blocker_len**2 + blocker_edge**2)

  # chassis c.g. offset from center of box
  chassis_cgx  = chassis_dx*0.1
  chassis_cgy  = 0
  chassis_cgz  = 0
  wheel_mass   = 0.25
  wheel_ixx    = wheel_mass * (wheel_radius**2 / 4.0 + wheel_width**2 / 12.0)
  wheel_iyy    = wheel_mass * (wheel_radius**2 / 4.0 + wheel_width**2 / 12.0)
  wheel_izz    = wheel_mass/2.0 * wheel_radius**2
%>
<sdf version="1.5">
  <!-- http://sdformat.org/spec?elem=sensor&ver=1.5 -->
  <model name="tankbot">
    <link name="chassis">
      <pose>0 0 <%= chassis_z0 %> 0 0 0</pose>

      <inertial>
        <pose><%= chassis_cgx %> <%= chassis_cgy %> <%= chassis_cgz %>  0 0 0</pose>
        <mass><%= chassis_mass %></mass>
        <inertia>
          <ixx><%= chassis_ixx %></ixx><iyy><%= chassis_iyy %></iyy><izz><%= chassis_izz %></izz>
          <ixy>0</ixy><ixz>0</ixz><iyz>0</iyz>
        </inertia>
      </inertial>

      <collision name="collision">
        <geometry>
          <box>
            <size><%= chassis_dx %> <%= chassis_dy %> <%= chassis_dz %></size>
          </box>
        </geometry>
      </collision>

      <visual name="visual">
        <geometry>
          <box>
            <size><%= chassis_dx %> <%= chassis_dy %> <%= chassis_dz %></size>
          </box>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/Yellow</name>
          </script>
        </material>
      </visual>
    </link>

    <link name="shoulder">
      <pose>
        0
        <%= blocker_offset %>
        <%= chassis_z0 %>
        0 0 0
      </pose>

      <inertial>
        <mass><%= shoulder_mass %></mass>
        <inertia>
          <ixx><%= shoulder_ixx %></ixx><iyy><%= shoulder_iyy %></iyy><izz><%= shoulder_izz %></izz>
          <ixy>0</ixy><ixz>0</ixz><iyz>0</iyz>
        </inertia>
      </inertial>

      <visual name='visual'>
        <geometry><cylinder><radius><%= shoulder_radius %></radius><length><%= shoulder_height %></length></cylinder></geometry>
        <material>
          <script><uri>file://media/materials/scripts/gazebo.material</uri><name>Gazebo/Blue</name></script>
        </material>
      </visual>

      <collision name='collision'>
        <geometry><cylinder><radius><%= shoulder_radius %></radius><length><%= shoulder_height %></length></cylinder></geometry>
      </collision>
    </link>

    <%
      arm_scales.keys.each do |k|
        y_scale = arm_scales[k][:y_scale]
    %>

    <%= '<link name="' + k + '_blocker' + '">' %>
      <pose>
        <%= (y_scale) * blocker_x %>
        <%= blocker_offset - blocker_y%>
        <%= chassis_z0 %>
        0 0 <%= y_scale * blocker_rad + 90 * Math::PI / 180.0%>
      </pose>

      <inertial>
        <mass><%= blocker_mass %></mass>
        <inertia>
          <ixx><%= blocker_ixx %></ixx><iyy><%= blocker_iyy %></iyy><izz><%= blocker_izz %></izz>
          <ixy>0</ixy><ixz>0</ixz><iyz>0</iyz>
        </inertia>
      </inertial>

      <visual name='visual'>
        <geometry><box><size><%= blocker_len %> <%= blocker_edge %> <%= blocker_edge %></size></box></geometry>
        <material>
          <script><uri>file://media/materials/scripts/gazebo.material</uri><name>Gazebo/Black</name></script>
        </material>
      </visual>

      <collision name='collision'>
        <geometry><box><size><%= blocker_len %> <%= blocker_edge %> <%= blocker_edge %></size></box></geometry>
      </collision>
    </link>

    <%= '<joint name="' + k + '_blocker_joint" type="fixed">' %>
      <parent>shoulder</parent>
      <%= '<child>' + k + '_blocker</child>' %>
    </joint>

    <% end %>

    <joint name="left_shoulder_joint" type="revolute">
      <parent>chassis</parent>
      <child>shoulder</child>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>




    <%
      front_wheel_locations.keys.each do |k|
        x0 = front_wheel_locations[k][:x0]
        y0 = front_wheel_locations[k][:y0]
    %>
    <%= "<link name=" + '"wheel_' + k + '">' %>
      <pose>
        <%= x0 %> <%= y0 %> <%= wheel_radius %>
        <%= -Math::PI/2 %> <%= -caster_angle %> 0
      </pose>
      <inertial>
        <mass><%= wheel_mass %></mass>
        <inertia>
          <ixx><%= wheel_ixx %></ixx>
          <iyy><%= wheel_iyy %></iyy>
          <izz><%= wheel_izz %></izz>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyz>0</iyz>
        </inertia>
      </inertial>
      <collision name="collision">
        <geometry>
          <cylinder>
            <radius><%= wheel_radius %></radius>
            <length><%= wheel_width %></length>
          </cylinder>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <cylinder>
            <radius><%= wheel_radius %></radius>
            <length><%= wheel_width %></length>
          </cylinder>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/Black</name>
          </script>
        </material>
      </visual>
    </link>
    <%
      # Steering and wheel spin implemented as universal joint
      # First axis is steering, has limits
      # Second axis is spin
      # Steering axis is inclinded by caster_angle, which is implemented
      #  by inclining the wheel link frame (see wheel link pose element)
      %>
    <%= "<joint name=" + '"wheel_' + k + '_drive" type="revolute">' %>
      <parent>chassis</parent>
      <%= "<child>wheel_" + k + "</child>" %>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>
    <% end %>
    <%
      rear_wheel_locations.keys.each do |k|
        x0 = rear_wheel_locations[k][:x0]
        y0 = rear_wheel_locations[k][:y0]
    %>
    <%= "<link name=" + '"wheel_' + k + '">' %>
      <pose>
       <%= x0 %> <%= y0 %> <%= wheel_radius %>
       <%= -Math::PI/2 %> 0 0
      </pose>
      <inertial>
        <mass><%= wheel_mass %></mass>
        <inertia>
          <ixx><%= wheel_ixx %></ixx>
          <iyy><%= wheel_iyy %></iyy>
          <izz><%= wheel_izz %></izz>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyz>0</iyz>
        </inertia>
      </inertial>
      <collision name="collision">
        <geometry>
          <cylinder>
            <radius><%= wheel_radius %></radius>
            <length><%= wheel_width %></length>
          </cylinder>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <cylinder>
            <radius><%= wheel_radius %></radius>
            <length><%= wheel_width %></length>
          </cylinder>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/Black</name>
          </script>
        </material>
      </visual>
    </link>
    <%= "<joint name=" + '"wheel_' + k + '_drive" type="revolute">' %>
      <parent>chassis</parent>
      <%= "<child>wheel_" + k + "</child>" %>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>
    <% end %>

    <include>
      <uri>model://ultrasonic_sensor</uri>
      <pose>
        0.0 0.0 <%= chassis_dz + wheel_radius %>
        0.0 0.0 <%= 90 * Math::PI / 180.0 %>
      </pose>
    </include>

    <joint name="sonar_joint" type="fixed">
      <child>ultrasonic_sensor::link</child>
      <parent>chassis</parent>
    </joint>

    <include>
      <uri>model://camera_sensor</uri>
      <pose>
        0.0 0.0 0.3
        0.0 0.0 <%= 90 * Math::PI / 180.0 %>
      </pose>
    </include>

    <joint name="camera_joint" type="fixed">
      <child>camera_sensor::link</child>
      <parent>chassis</parent>
    </joint>
  </model>
</sdf>
